// FastechPublic_IO.cpp: implementation of the CFastechPublic_IO class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "FastechPublic_IO.h"

#include "FAS_HSSI.h"
#include "math.h"
//#include "io.h"     // 파일 존재 유무 검사 함수 호출하기 위해서는 반드시 INCLUDE 필요 


#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////
CFastechPublic_IO  FAS_IO;  

CFastechPublic_IO::CFastechPublic_IO()
{
	SafetyAreaStep = 0;
	n_retry = 0;
}

CFastechPublic_IO::~CFastechPublic_IO()
{

}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
//2011.1019 james lee WORD 단위로 I/O를 제어한다
//Ver 0.0.1_2011.1019
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////


//2011.1019 james //Word 단위로 제어시 사용하는 함수 
BOOL CFastechPublic_IO::get_in_bit(int n_IONo, int n_OnOff)  //2011.1019 Simulation 동작구현 목적으로 onoff 추가 
{
/*
	CString sMsg;
	int     nRet=0;
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0, nBitNo = 0;
	BOOL    bData=0;
*/
	if(mn_simulation_mode == 1) //Simulation 모드이면 프로그램이 동작해야 하니 I/O 상태를 원하는 것으로 셋팅해 준다 
	{
		n_in[n_IONo] = n_OnOff;
		return n_in[n_IONo]; 
	}

	return n_in[n_IONo];

	//이하는 사용하지 않는다 
	/*
	nMasterID = Search_IO_BoardInformation(0, n_IONo);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo);
	nBitNo    = Search_IO_BoardInformation(3, n_IONo);

	nRet = HSSI_ReadInputBit(nMasterID, nPortNo, nSlaveNo, nBitNo, &bData);  // SLAVE I/O 모듈 입력 신호 READ 함수 [BIT 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		bData = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}	
	return bData;*/
}

int CFastechPublic_IO::set_out_bit(int n_IONo, BOOL b_OnOff) 
{
/*
	CString sMsg;
	int     nRet=0;
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0, nBitNo=0;
*/

	n_out[n_IONo] = b_OnOff;
	return STATUS_SUCCESS;


	//이하는 사용하지 않는다 
	/*
	nMasterID = Search_IO_BoardInformation(0, n_IONo);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo);
	nBitNo    = Search_IO_BoardInformation(3, n_IONo);

	nRet = HSSI_WriteOutputBit(nMasterID, nPortNo, nSlaveNo, nBitNo, b_OnOff);  // SLAVE I/O 모듈 출력 신호 발생 함수 [BIT 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;*/
}

BOOL CFastechPublic_IO::get_out_bit(int n_IONo, int n_OnOff)
{
/*
	CString sMsg;
	int     nRet=0;	
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0,nBitNo=0;
	BOOL    bData;
*/

	if(mn_simulation_mode == 1) //Simulation 모드이면 프로그램이 동작해야 하니 I/O 상태를 원하는 것으로 셋팅해 준다 
	{		
		return n_out[n_IONo] = n_OnOff;
	}

	return n_out[n_IONo];
	//이하는 사용하지 않는다 
	/*
	nMasterID = Search_IO_BoardInformation(0, n_IONo);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo);
	nBitNo    = Search_IO_BoardInformation(3, n_IONo);
	
	nRet = HSSI_ReadOutputBit(nMasterID, nPortNo, nSlaveNo, nBitNo, &bData);  // SLAVE I/O 모듈 입력 신호 READ 함수 [BIT 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		bData = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}	
	return bData;*/
}

int CFastechPublic_IO::IO_ReadWrite(int n_bd_num, int n_port_num, int n_slave_num, int n_rw_mode)
{//n_rw_mode : -1:변수값 초기화, 0=> initialize i/o 상태 read, 1:input, 2:output
	WORD	wData = 0;
	int     i=0, nRet=0, nBoardID=-1, nPortNo=0, nSlaveNo=0, nIO_Num = 0;
 
//#define MAX_PCI_SLOT 8	// 0~7 8개
//#define MAX_PORT_NO 4	// 0~3 4개
//#define MAX_SLAVE_NO 8	// 0~7 8개


	//보드 정보를 이용하여 io port 번호로 변경한다 
	if(n_bd_num < 0 || n_bd_num > MAX_PCI_SLOT - 6) //MAX_PCI_SLOT - 1)
	{//	보드는 실제 8장까지 사용가능하나 당사는 MAX를 2장으로 한다 
		AfxMessageBox("IO Board [0 ~ 1] Max Num Over");//[0 ~ 7] Max Num Over");
		return BD_ERROR;
	}
	else nBoardID = n_bd_num * 4000;

	if(n_port_num < 0 || n_port_num > MAX_PORT_NO - 1)
	{
		AfxMessageBox("IO Board Port [0 ~ 3] Max Num Over");
		return BD_ERROR;
	}
	else nPortNo   = n_port_num * 1000;

	if(n_slave_num < 0 || n_slave_num > MAX_SLAVE_NO - 1)
	{
		AfxMessageBox("IO Board Slave [0 ~ 7] Max Num Over");
		return BD_ERROR;
	}
	else nSlaveNo   = n_slave_num * 100;
	
	
    nIO_Num = nBoardID + nPortNo + nSlaveNo;
	if(nIO_Num > HSSI_MAX_IO - 1) //#define HSSI_MAX_IO		8716 //max io board 2장 까지만 선언하여 사용하자 //max io board 4장 까지만 처리한다 
	{
		AfxMessageBox("IO Num [8715] Max Num Over");
		return BD_ERROR;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//장비 I/O port를 define 및 통신포트 초기화 후 I/O 실제 제어전에 각 포트의 상태를 읽어 변수에 셋팅하여 준다 
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////

	if(n_rw_mode == -1) //input, output port 사용유무 처음 한번 초기화 할 것 
	{
		for(i=0; i<HSSI_MAX_IO; i++) //포트 사용 유무 초기화 
		{
			n_in[i]  = 0;//-1;
			n_out[i] = -1;
		}

// 		n_out[st_io.o_robot_picker_01_cyl] = 1;			//  S0000
// 		n_out[st_io.o_robot_picker_02_cyl] = 1;			//  S0001
// 		n_out[st_io.o_robot_picker_03_cyl] = 1;			//  S0002
// 		n_out[st_io.o_robot_picker_04_cyl] = 1;			//  S0003
// 		n_out[st_io.o_robot_picker_05_cyl] = 1;			//  S0004
// 		n_out[st_io.o_robot_picker_06_cyl] = 1;			//  S0005
// 		n_out[st_io.o_robot_picker_07_cyl] = 1;			//  S0006
// 		n_out[st_io.o_robot_picker_08_cyl] = 1;			//  S0007
// 		n_out[st_io.o_robot_picker_09_cyl] = 1;			//  S0008
// 		n_out[st_io.o_robot_picker_10_cyl] = 1;			//  S0009
// 		
// 		// ************************************************************
// 		//  Robot Gripper On/Off
// 		// ************************************************************
// 		n_out[st_io.o_robot_gripper_01_cyl] = 1;			//  S0100
// 		n_out[st_io.o_robot_gripper_02_cyl] = 1;			//  S0101
// 		n_out[st_io.o_robot_gripper_03_cyl] = 1;			//  S0102
// 		n_out[st_io.o_robot_gripper_04_cyl] = 1;			//  S0103
// 		n_out[st_io.o_robot_gripper_05_cyl] = 1;			//  S0104
// 		n_out[st_io.o_robot_gripper_06_cyl] = 1;			//  S0105
// 		n_out[st_io.o_robot_gripper_07_cyl] = 1;			//  S0106
// 		n_out[st_io.o_robot_gripper_08_cyl] = 1;			//  S0107
// 		n_out[st_io.o_robot_gripper_09_cyl] = 1;			//  S0108
// 		n_out[st_io.o_robot_gripper_10_cyl] = 1;			//  S0109
// 		// ************************************************************
// 
// 		// ************************************************************
// 		//  Robot Gripper On Check
// 		// ************************************************************
// 		// ************************************************************
// 		//  Buffer Check
// 		// ************************************************************
// 		n_out[st_io.o_reject_buf_shift_on_cyl] = 1;			//  S0301
// 		n_out[st_io.o_reject_buf_shift_off_cyl] = 1;		//  S0302
// 		n_out[st_io.o_gripper_length_ready_cyl] = 1;		//  S0303
// 		n_out[st_io.o_gripper_length_unready_cyl] = 1;		//  S0304	
// 		// ************************************************************
// 
// 		// ************************************************************
// 		//  Loader Conveyor
// 		// ************************************************************
// 		n_out[st_io.o_ld_conveyor_tray_stopper_cyl] = 1;			//  S0400
// 		n_out[st_io.o_ld_conveyor_tray_elev_change_on_cyl] = 1;			//  S0401
// 		n_out[st_io.o_ld_conveyor_tray_elev_change_off_cyl] = 1;			//  S0402
// 		n_out[st_io.o_ld_conveyor_motor_onoff] = 1;			//  S0403
// 		n_out[st_io.o_ld_conveyor_motor_cw] = 1;			//  S0404
// 		n_out[st_io.o_ld_conveyor_motor_ccw] = 1;			//  S0405
// 		// ************************************************************
// 
// 		// ************************************************************
// 		//  Loader Tray Check
// 		// ************************************************************
// 		n_out[st_io.o_ld_zone_tray_change_on_cyl] = 1;			//  S0500
// 		n_out[st_io.o_ld_zone_tray_change_off_cyl] = 1;			//  S0501
// 		n_out[st_io.o_ld_zone_tray_seperate_cyl] = 1;			//  S0502
// 		n_out[st_io.o_ld_zone_tray_base_rail_fbwd_cyl] = 1;			//  S0503
// 		// ************************************************************
// 
// 		// ************************************************************
// 		//  Loader Tray Move
// 		// ************************************************************
// 		n_out[st_io.o_ld_zone_1_tray_clamp_cyl] = 1;			//  S0600
// 		n_out[st_io.o_ld_zone_2_tray_clamp_cyl] = 1;			//  S0601
// 		// ************************************************************
// 
// 		// ************************************************************
// 		//  Loader Tray Move
// 		// ************************************************************
// 		n_out[st_io.o_ld_zone_tray_move_fwd_cyl] = 1;			//  S0700
// 		n_out[st_io.o_ld_zone_tray_move_bwd_cyl] = 1;			//  S0701
// 		n_out[st_io.o_ld_zone_tray_hook_cyl] = 1;			//  S0702
// 		n_out[st_io.o_uld_zone_tray_hook_cyl] = 1;			//  S0703
// 		// ************************************************************
// 
// 		// ************************************************************
// 		//  Unloader Air Blow
// 		// ************************************************************
// 		n_out[st_io.o_uld_air_blow_tray_in_shutter_cyl] = 1;			//  S1000
// 		n_out[st_io.o_uld_air_blow_1_onoff] = 1;			//  S1001
// 		n_out[st_io.o_uld_air_blow_2_onoff] = 1;			//  S1002
// 		n_out[st_io.o_uld_air_blow_tray_out_shutter_cyl] = 1;			//  S1003
// 		
// 		n_out[st_io.o_uld_air_blow_motor_onoff] = 1;			//  S1006
// 		n_out[st_io.o_uld_air_blow_motor_cw] = 1;			//  S1007
// 		n_out[st_io.o_uld_air_blow_motor_ccw] = 1;			//  S1008
// 		n_out[st_io.o_uld_tray_pusher_motor_onoff] = 1;			//  S1009
// 		n_out[st_io.o_uld_tray_pusher_motor_cw] = 1;			//  S1010
// 		n_out[st_io.o_uld_tray_pusher_motor_ccw] = 1;			//  S1011
// 
// 		n_out[st_io.o_door_onoff_cyl] = 1;			//  S1013
// 		n_out[st_io.o_reject_buf_door_onoff] = 1;			//  S1014
// 		// ************************************************************
// 
// 		// ************************************************************
// 		//  Unloader Air Blow Box
// 		// ************************************************************
// 		// ************************************************************
// 
// 		// ************************************************************
// 		//  Unloader Air Blow Box
// 		// ************************************************************
// 		n_out[st_io.o_uld_tray_base_rail_move_cyl] = 1;			//  S1200
// 		n_out[st_io.o_uld_tray_clamp_cyl] = 1;			//  S1201
// 		n_out[st_io.o_uld_tray_small_size_stopper_cyl] = 1;			//  S1202
// 		// ************************************************************
// 
// 		// ************************************************************
// 		//  Unloader Air Blow Box
// 		// ************************************************************
// 		n_out[st_io.o_uld_conveyor_tray_stopper_cyl] = 1;			//  S1300
// 		n_out[st_io.o_uld_conveyor_motor_onoff] = 1;			//  S1301
// 		n_out[st_io.o_uld_conveyor_motor_cw] = 1;			//  S1302
// 		n_out[st_io.o_uld_conveyor_motor_ccw] = 1;			//  S1303
// 		n_out[st_io.o_uld_conveyor_tray_change_on_cyl] = 1;			//  S1304
// 		n_out[st_io.o_uld_conveyor_tray_change_off_cyl] = 1;			//  S1305
// 		// ************************************************************
// 
// 		// ************************************************************
// 		//  Switch & Tower Lamp
// 		// ************************************************************
// 		n_out[st_io.o_start_switch_lamp] = 1;			//	S1400
// 		n_out[st_io.o_stop_switch_lamp] = 1;			//	S1401
// 		n_out[st_io.o_alarm_reset_switch_lamp] = 1;			//	S1402
// 		n_out[st_io.o_buzzer_off_switch_lamp] = 1;			//	S1403
// 		n_out[st_io.o_main_air] = 1;			//	S1404
// 		n_out[st_io.o_towerlamp_green] = 1;			//	S1405
// 		n_out[st_io.o_towerlamp_yellow] = 1;			//	S1406
// 		n_out[st_io.o_towerlamp_red] = 1;			//	S1407
// 		// ************************************************************
// 
// 		// ************************************************************
// 		//  LIGHT CURTAIN
// 		// ************************************************************
// 		n_out[st_io.o_buzzer_1] = 1;			//	S1500
// 		n_out[st_io.o_buzzer_2] = 1;			//	S1501
// 		n_out[st_io.o_buzzer_3] = 1;			//	S1502
// 		n_out[st_io.o_buzzer_4] = 1;			//	S1503
// 		n_out[st_io.o_dust_collector_onoff] = 1;			//  S1504
// 		// ************************************************************
// 
// 		// ************************************************************
// 		//  SMEMA
// 		// ************************************************************
// 		n_out[st_io.o_front_machine_front_request_sginal] = 1;			//	S1600
// 		n_out[st_io.o_front_machine_rear_request_sginal] = 1;			//	S1601
// 		n_out[st_io.o_rear_machine_transfer_signal] = 1;			//	S1602
// 	

	}

	if(mn_simulation_mode == 1) //Simulation 모드이면 프로그램이 동작해야 하니 I/O 상태를 원하는 것으로 셋팅해 준다 
	{//장비없이 스뮬레이션 모드로 프로그램 테스트시 밑으로 내려가 읽으면 변수가 클리어 되니 리턴한다 
		return BD_GOOD; 
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////
	// 장비 초기화시 처음한번 Input 과 output port의 상태를 받는다 
	//////////////////////////////////////////////////////////////////////////////////////////////////
	if(n_rw_mode == 0) //initialize total input/ output read mode 
	{
		//////////////////////////////////////////////////////////////////////////////////////////////////////
		//선된 변수 최초 한번 초기화
		// in/out 변수가 -1이면 사용하지 않는 포트이고, 0 또는 1이면 정상적으로 장비에서 시용하는 변수이다 
		//////////////////////////////////////////////////////////////////////////////////////////////////////
		// ************************************************************************** //
		// 입력(모듈 번호 00번)								                          //
		// ************************************************************************** //
		nRet = HSSI_ReadInputWord(n_bd_num, n_port_num, n_slave_num, &wData); //(iMasterID, iPortNo, iSlaveNo, &wData); 
		if(nRet != STATUS_SUCCESS){return BD_ERROR;};//error

		n_in[nIO_Num + 0]	= (wData & DBIT0)   ? 1 : 0 ;		// PS000 (모듈: 0	포트: 0) 
		n_in[nIO_Num + 1]	= (wData & DBIT1)   ? 1 : 0 ;		// PS001 (모듈: 0	포트: 1) 
		n_in[nIO_Num + 2]	= (wData & DBIT2)   ? 1 : 0 ;		// PS002 (모듈: 0	포트: 2) 
		n_in[nIO_Num + 3]	= (wData & DBIT3)   ? 1 : 0 ;		// PS003 (모듈: 0	포트: 3) 
		n_in[nIO_Num + 4]	= (wData & DBIT4)   ? 1 : 0 ;		// PS004 (모듈: 0	포트: 4)
		n_in[nIO_Num + 5]	= (wData & DBIT5)   ? 1 : 0 ;		// PS005 (모듈: 0	포트: 5) 
		n_in[nIO_Num + 6]	= (wData & DBIT6)   ? 1 : 0 ;		// PS006 (모듈: 0	포트: 6) 
		n_in[nIO_Num + 7]	= (wData & DBIT7)   ? 1 : 0 ;		// PS007 (모듈: 0	포트: 7) 
		n_in[nIO_Num + 8]	= (wData & DBIT8)   ? 1 : 0 ;		// PS008 (모듈: 0	포트: 8) 
		n_in[nIO_Num + 9]	= (wData & DBIT9)   ? 1 : 0 ;		// PS009 (모듈: 0	포트: 9) 
		n_in[nIO_Num + 10]	= (wData & DBIT10)  ? 1 : 0 ;		// PS010 (모듈: 0	포트: 10) 
		n_in[nIO_Num + 11]	= (wData & DBIT11)  ? 1 : 0 ;		// PS011 (모듈: 0	포트: 11) 
		n_in[nIO_Num + 12]	= (wData & DBIT12)  ? 1 : 0 ;		// PS012 (모듈: 0	포트: 12) 
		n_in[nIO_Num + 13]	= (wData & DBIT13)  ? 1 : 0 ;		// PS013 (모듈: 0	포트: 13) 
		n_in[nIO_Num + 14]	= (wData & DBIT14)  ? 1 : 0 ;		// PS014 (모듈: 0	포트: 14) 
		n_in[nIO_Num + 15]	= (wData & DBIT15)  ? 1 : 0 ;		// PS015 (모듈: 0	포트: 15) 

		// ************************************************************************** //
		// 출력(모듈 번호 00번)								                          //
		// ************************************************************************** //
		nRet = HSSI_ReadOutputWord(n_bd_num, n_port_num, n_slave_num, &wData); //(iMasterID, iPortNo, iSlaveNo, &wData); 
		if(nRet != STATUS_SUCCESS){return BD_ERROR;};//error

		for(i=0; i<16; i++)//io port 16개
		{
// 			if(n_out[nIO_Num + i] == 0 || n_out[nIO_Num + i] == 1) //0:off, 1:on
// 			{
				if     (i == 0)	n_out[nIO_Num + 0]		= (wData & DBIT0)   ? 1 : 0 ;		// S000 (모듈: 0	포트: 0) 
				else if(i == 1)	n_out[nIO_Num + 1]		= (wData & DBIT1)   ? 1 : 0 ;		// S001 (모듈: 0	포트: 1) 
				else if(i == 2) n_out[nIO_Num + 2]		= (wData & DBIT2)   ? 1 : 0 ;		// S002 (모듈: 0	포트: 2) 
				else if(i == 3) n_out[nIO_Num + 3]		= (wData & DBIT3)   ? 1 : 0 ;		// S003 (모듈: 0	포트: 3) 
				else if(i == 4) n_out[nIO_Num + 4]		= (wData & DBIT4)   ? 1 : 0 ;		// S004 (모듈: 0	포트: 4)
				else if(i == 5) n_out[nIO_Num + 5]		= (wData & DBIT5)   ? 1 : 0 ;		// S005 (모듈: 0	포트: 5) 
				else if(i == 6) n_out[nIO_Num + 6]		= (wData & DBIT6)   ? 1 : 0 ;		// S006 (모듈: 0	포트: 6) 
				else if(i == 7) n_out[nIO_Num + 7]		= (wData & DBIT7)   ? 1 : 0 ;		// S007 (모듈: 0	포트: 7) 
				else if(i == 8) n_out[nIO_Num + 8]		= (wData & DBIT8)   ? 1 : 0 ;		// S008 (모듈: 0	포트: 8) 
				else if(i == 9) n_out[nIO_Num + 9]		= (wData & DBIT9)   ? 1 : 0 ;		// S009 (모듈: 0	포트: 9) 
				else if(i == 10) n_out[nIO_Num + 10]	= (wData & DBIT10)  ? 1 : 0 ;		// S010 (모듈: 0	포트: 10) 
				else if(i == 11) n_out[nIO_Num + 11]	= (wData & DBIT11)  ? 1 : 0 ;		// S011 (모듈: 0	포트: 11) 
				else if(i == 12) n_out[nIO_Num + 12]	= (wData & DBIT12)  ? 1 : 0 ;		// S012 (모듈: 0	포트: 12) 
				else if(i == 13) n_out[nIO_Num + 13]	= (wData & DBIT13)  ? 1 : 0 ;		// S013 (모듈: 0	포트: 13) 
				else if(i == 14) n_out[nIO_Num + 14]	= (wData & DBIT14)  ? 1 : 0 ;		// S014 (모듈: 0	포트: 14) 
				else if(i == 15) n_out[nIO_Num + 15]	= (wData & DBIT15)  ? 1 : 0 ;		// S015 (모듈: 0	포트: 15) 
//			}
		}
	}	

	if(n_rw_mode == 1 || n_rw_mode == 2) //input read mode
	{
		// ************************************************************************** //
		// 입력(모듈 번호 00번)								                          //
		// ************************************************************************** //
		nRet = HSSI_ReadInputWord(n_bd_num, n_port_num, n_slave_num, &wData); //(iMasterID, iPortNo, iSlaveNo, &wData); 
		if(nRet != STATUS_SUCCESS){return BD_ERROR;};//error

		n_in[nIO_Num + 0]	= (wData & DBIT0)   ? 1 : 0 ;		// PS000 (모듈: 0	포트: 0) 
		n_in[nIO_Num + 1]	= (wData & DBIT1)   ? 1 : 0 ;		// PS001 (모듈: 0	포트: 1) 
		n_in[nIO_Num + 2]	= (wData & DBIT2)   ? 1 : 0 ;		// PS002 (모듈: 0	포트: 2) 
		n_in[nIO_Num + 3]	= (wData & DBIT3)   ? 1 : 0 ;		// PS003 (모듈: 0	포트: 3) 
		n_in[nIO_Num + 4]	= (wData & DBIT4)   ? 1 : 0 ;		// PS004 (모듈: 0	포트: 4)
		n_in[nIO_Num + 5]	= (wData & DBIT5)   ? 1 : 0 ;		// PS005 (모듈: 0	포트: 5) 
		n_in[nIO_Num + 6]	= (wData & DBIT6)   ? 1 : 0 ;		// PS006 (모듈: 0	포트: 6) 
		n_in[nIO_Num + 7]	= (wData & DBIT7)   ? 1 : 0 ;		// PS007 (모듈: 0	포트: 7) 
		n_in[nIO_Num + 8]	= (wData & DBIT8)   ? 1 : 0 ;		// PS008 (모듈: 0	포트: 8) 
		n_in[nIO_Num + 9]	= (wData & DBIT9)   ? 1 : 0 ;		// PS009 (모듈: 0	포트: 9) 
		n_in[nIO_Num + 10]	= (wData & DBIT10)  ? 1 : 0 ;		// PS010 (모듈: 0	포트: 10) 
		n_in[nIO_Num + 11]	= (wData & DBIT11)  ? 1 : 0 ;		// PS011 (모듈: 0	포트: 11) 
		n_in[nIO_Num + 12]	= (wData & DBIT12)  ? 1 : 0 ;		// PS012 (모듈: 0	포트: 12) 
		n_in[nIO_Num + 13]	= (wData & DBIT13)  ? 1 : 0 ;		// PS013 (모듈: 0	포트: 13) 
		n_in[nIO_Num + 14]	= (wData & DBIT14)  ? 1 : 0 ;		// PS014 (모듈: 0	포트: 14) 
		n_in[nIO_Num + 15]	= (wData & DBIT15)  ? 1 : 0 ;		// PS015 (모듈: 0	포트: 15) 
	}

	if(n_rw_mode == 1 || n_rw_mode == 2) //output mode
	{
		// ************************************************************************** //
		// 입력(모듈 번호 00번)								                          //
		// ************************************************************************** //
		wData = 0;
		for(i=0; i<16; i++)//io port 16개
		{
			if(n_out[nIO_Num + i] == 0 || n_out[nIO_Num + i] == 1) //0:off, 1:on
			{
				if     (i == 0)  wData += n_out[nIO_Num + i]		* DBIT0;  // S000 (모듈: 0	포트: 0)
				else if(i == 1)  wData += n_out[nIO_Num + i]		* DBIT1;  // S001 (모듈: 0	포트: 1)
				else if(i == 2)  wData += n_out[nIO_Num + i]		* DBIT2;  // S002 (모듈: 0	포트: 2)
				else if(i == 3)  wData += n_out[nIO_Num + i]		* DBIT3;  // S003 (모듈: 0	포트: 3)
				else if(i == 4)  wData += n_out[nIO_Num + i]		* DBIT4;  // S004 (모듈: 0	포트: 4)
				else if(i == 5)  wData += n_out[nIO_Num + i]		* DBIT5;  // S005 (모듈: 0	포트: 5)
				else if(i == 6)  wData += n_out[nIO_Num + i]		* DBIT6;  // S006 (모듈: 0	포트: 6)
				else if(i == 7)  wData += n_out[nIO_Num + i]		* DBIT7;  // S007 (모듈: 0	포트: 7)
				else if(i == 8)  wData += n_out[nIO_Num + i]		* DBIT8;  // S008 (모듈: 0	포트: 8)
				else if(i == 9)  wData += n_out[nIO_Num + i]		* DBIT9;  // S009 (모듈: 0	포트: 9)
				else if(i == 10) wData += n_out[nIO_Num + i]		* DBIT10; // S010 (모듈: 0	포트: 10)
				else if(i == 11) wData += n_out[nIO_Num + i]		* DBIT11; // S011 (모듈: 0	포트: 11)
				else if(i == 12) wData += n_out[nIO_Num + i]		* DBIT12; // S012 (모듈: 0	포트: 12)
				else if(i == 13) wData += n_out[nIO_Num + i]		* DBIT13; // S013 (모듈: 0	포트: 13)
				else if(i == 14) wData += n_out[nIO_Num + i]		* DBIT14; // S014 (모듈: 0	포트: 14)
				else if(i == 15) wData += n_out[nIO_Num + i]		* DBIT15; // S015 (모듈: 0	포트: 15)
			}
		}

		nRet = HSSI_WriteOutputWord(n_bd_num, n_port_num, n_slave_num, wData);//(iMasterID, iPortNo, iSlaveNo, wData); //TRUE = enable, FALSE = Dasible
		if(nRet != STATUS_SUCCESS){return BD_ERROR;};//error 
	}
	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//2011.1019 james lee WORD 단위로 I/O를 제어한다
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





// ******************************************************************************
// I/O 보드 라이브러리 초기화 함수                                                   
// ******************************************************************************
// ******************************************************************************
// I/O 보드 오픈 함수                                                            
// ******************************************************************************
int CFastechPublic_IO::Set_IO_BoardOpen(INT* pn_MasterNo, int n_OpenMethod) 
{
	CString sMsg;
	int     nRet=0;
	INT     nMasterNo=0;

	nRet = HSSI_Open(&nMasterNo, n_OpenMethod);  // HSSI 초기화 함수 
	if (nRet == STATUS_SUCCESS)
	{
		*pn_MasterNo = nMasterNo;
	}
	else
	{
 		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}

	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// I/O 보드 해제 함수                                                            
// ******************************************************************************
int CFastechPublic_IO::Set_IO_BoardClose(bool b_CloseMethod) 
{
	CString sMsg;
	int     nRet=0;

	nRet = HSSI_Close(b_CloseMethod);  // HSSI 리소스 해제 함수 
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
 		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}

	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 입출력 설정 함수 [WORD 단위]                                 
// ******************************************************************************
int CFastechPublic_IO::Set_IO_DefineWord(int n_MasterID, int n_PortNo, int n_SlaveNo, WORD w_Data) 
{
	CString sMsg;
	int     nRet=0;

	nRet = HSSI_WriteDirectionWord(n_MasterID, n_PortNo, n_SlaveNo, w_Data);  // SLAVE I/O 모듈의 입출력 설정 함수 [WORD 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 입출력 설정 함수 [BYTE 단위]                                 
// ******************************************************************************
int CFastechPublic_IO::Set_IO_DefineByte(int n_MasterID, int n_PortNo, int n_SlaveNo, int n_Type, BYTE bt_Data) 
{
	CString sMsg;
	int     nRet=0;

	nRet = HSSI_WriteDirectionByte(n_MasterID, n_PortNo, n_SlaveNo, n_Type, bt_Data);  // SLAVE I/O 모듈의 입출력 설정 함수 [BYTE 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 입출력 설정 함수 [BIT 단위]                                  
// ******************************************************************************
int CFastechPublic_IO::Set_IO_DefineBit(int n_IONo, BOOL b_Data) 
{
	CString sMsg;
	int     nRet=0;
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0, nBitNo=0;

	nMasterID = Search_IO_BoardInformation(0, n_IONo);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo);
	nBitNo    = Search_IO_BoardInformation(3, n_IONo);

	nRet = HSSI_WriteDirectionBit(nMasterID, nPortNo, nSlaveNo, nBitNo, b_Data);  // SLAVE I/O 모듈의 입출력 설정 함수 [BIT 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 입출력 설정 상태 리턴 [WORD 단위]                            
// ******************************************************************************
int CFastechPublic_IO::Get_IO_DefineWord(int n_MasterID, int n_PortNo, int n_SlaveNo, WORD* pw_Data) 
{
	CString sMsg;
	int     nRet=0;
	WORD    wData=0;

	nRet = HSSI_ReadDirectionWord(n_MasterID, n_PortNo, n_SlaveNo, &wData);  // SLAVE I/O 모듈의 입출력 설정 상태 리턴 [WORD 단위]
	if (nRet == STATUS_SUCCESS)
	{
		*pw_Data = wData;
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 입출력 설정 상태 리턴 [BYTE 단위]                            
// ******************************************************************************
int CFastechPublic_IO::Get_IO_DefineByte(int n_MasterID, INT n_PortNo, int n_SlaveNo, int n_Type, BYTE* pb_Data) 
{
	CString sMsg;
	int     nRet=0;
	BYTE    bData=0;

	nRet = HSSI_ReadDirectionByte(n_MasterID, n_PortNo, n_SlaveNo, n_Type, &bData);  // SLAVE I/O 모듈의 입출력 설정 상태 리턴 [BYTE 단위]
	if (nRet == STATUS_SUCCESS)
	{
		*pb_Data = bData;
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 입출력 설정 상태 리턴 [BIT 단위]                             
// ******************************************************************************
int CFastechPublic_IO::Get_IO_DefineBit(int n_IONo, BOOL* pb_Data) 
{
	CString sMsg;
	int     nRet=0;
	BOOL    bData;
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0, nBitNo=0;

	nMasterID = Search_IO_BoardInformation(0, n_IONo);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo);
	nBitNo    = Search_IO_BoardInformation(3, n_IONo);

	nRet = HSSI_ReadDirectionBit(nMasterID, nPortNo, nSlaveNo, nBitNo, &bData);  // SLAVE I/O 모듈의 입출력 설정 상태 리턴 [BIT 단위]
	if (nRet == STATUS_SUCCESS)
	{
		*pb_Data = bData;
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// PC에 연결된 마스터 보드 갯수 검사 함수                                        
// ******************************************************************************
int CFastechPublic_IO::Search_IO_Master(INT* pn_MasterNo) 
{
	CString sMsg;
	int     nRet=0;
	INT     nMasterNo=0;

	nRet = HSSI_GetAttachedMasterBoard(&nMasterNo);  // 현재 PC에 연결되어 있는 마스터 보드 갯수 리턴 함수
	if (nRet == STATUS_SUCCESS)
	{
		*pn_MasterNo = nMasterNo;
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수  
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}

	return nRet;
}
// ******************************************************************************


// ******************************************************************************
// 마스터 보드에 연결된 PORT 갯수 검사 함수                                      
// ******************************************************************************
int CFastechPublic_IO::Search_IO_Port(int n_MasterID, INT* pn_PortNo) 
{
	CString sMsg;
	int     nRet=0;
	INT     nPortNo=0;

	nRet = HSSI_GetAttachedPort(n_MasterID, &nPortNo);  // 마스터 보드의 정상 동작하는 PORT 갯수 리턴 함수
	if (nRet == STATUS_SUCCESS)
	{
		*pn_PortNo = nPortNo;
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// PORT에 연결된 SLAVE 검사 함수                                                 
// ******************************************************************************
int CFastechPublic_IO::Search_IO_Slave(int n_MasterID, int n_PortNo, INT* pn_SlaveNo) 
{
	CString sMsg;
	int     nRet=0;	
	INT     nSlaveNo=0;

	nRet = HSSI_GetAttachedSlaveModule(n_MasterID, n_PortNo, &nSlaveNo);  // PORT에 연결된 SLAVE I/O 모듈 검사 함수
	if (nRet == STATUS_SUCCESS)
	{
		*pn_SlaveNo = nSlaveNo;
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O MODULE이 ENABLE 상태로 마스터 보드에 연결되어 있는지 검사 함수      
// ******************************************************************************
int CFastechPublic_IO::Check_IO_SlaveStatus(int n_MasterID, int n_PortNo, int n_SlaveNo) 
{
	CString sMsg;
	int     nRet=0;

	nRet = HSSI_IsExistSlaveModule(n_MasterID, n_PortNo, n_SlaveNo);  // SLAVE I/O MODULE이 ENABLE 상태로 마스터 보드에 연결되어 있는지 검사 함수
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// PORT에 연결된 SLAVE [ENABLE/DISABLE] 상태 검사 함수                           
// ******************************************************************************
BOOL CFastechPublic_IO::Check_IO_Slave(int n_MasterID, int n_PortNo, int n_SlaveID) 
{
	int nSlaveInfo;

	FAS_STATUS  fasResult;

	// **************************************************************************
	// nSlaveInfo : 최하위로부터 상위 비트 방향으로 8개의 BIT까지 각 SLAVE들의   
	//              연결 상태가 저장된 BCD가 들어있다                            
	// -> BIT 1   : SLAVE I/O 모듈이 연결되어 ENABLE된 상태                      
	// -> BIT 0   : SLAVE I/O 모듈이 연결되지 않아 DISABLE된 상태                
	// **************************************************************************
	fasResult = HSSI_GetAttachedSlaveModule(n_MasterID, n_PortNo, &nSlaveInfo);  // PORT에 연결된 SLAVE I/O 모듈 검사 함수
	if (((nSlaveInfo >> n_SlaveID) & 0x1) != 1)
	{
		return BD_ERROR;
	}
	// **************************************************************************

	return BD_GOOD;
}
// ******************************************************************************

// ******************************************************************************
// PORT와 SLAVE I/O 모듈과의 통신 속도 설정 함수                                 
// -> PORT_SPEED_05 : 0.5 Mbps                                                   
// -> PORT_SPEED_10 : 1.0 Mbps                                                   
// -> PORT_SPEED_20 : 2.0 Mbps                                                   
// ******************************************************************************
int CFastechPublic_IO::Set_IO_HSSISpeed(int n_MasterID, int n_PortNo, int n_Type) 
{
	CString sMsg;
	int     nRet=0, nFlag = BD_ERROR;

	nRet = HSSI_SetCommSpeed(n_MasterID, n_PortNo, n_Type);  // 해당 PORT와 I/O 모듈 사이의 통신 속도 설정 함수
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// PORT와 SLAVE I/O 모듈과의 통신 속도 리턴 함수                                 
// -> PORT_SPEED_05 : 0.5 Mbps                                                   
// -> PORT_SPEED_10 : 1.0 Mbps                                                   
// -> PORT_SPEED_20 : 2.0 Mbps                                                   
// ******************************************************************************
int CFastechPublic_IO::Get_IO_HSSISpeed(int n_MasterID, int n_PortNo, INT* pn_Type) 
{
	CString sMsg;
	int     nRet=0;
	INT     nType;

	nRet = HSSI_GetCommSpeed(n_MasterID, n_PortNo, &nType);  // 해당 PORT와 I/O 모듈 사이의 통신 속도 리턴 함수
	if (nRet == STATUS_SUCCESS)
	{
		*pn_Type = nType;
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// 보드 장착 상태 검사 함수                                                      
// ******************************************************************************
int CFastechPublic_IO::Check_IO_BoardExist(int n_MaxSlot, int n_MaxPort, int n_MaxSlave) 
{
	int nMasterID, nPortNo, nSlaveID;
	int nRet=0;

	while(1)
	{
		for(nMasterID=0; nMasterID<n_MaxSlot; nMasterID++)
		{
			nRet = Check_IO_MasterStatus(nMasterID);  // 마스터 보드 장착 유무 검사 함수
			if (nRet != BD_GOOD)
			{
				continue ;
			}

			for(nPortNo=0; nPortNo<n_MaxPort; nPortNo)
			{
				nRet = Check_IO_PortStatus(nMasterID, nPortNo);  // PORT 존재 유무 및 정상 동작 검사 함수
				if (nRet != BD_GOOD)
				{
					continue ;
				}

				for(nSlaveID=0; nSlaveID<n_MaxSlave; nSlaveID++)
				{
					nRet = Check_IO_SlaveStatus(nMasterID, nPortNo, nSlaveID);  // SLAVE I/O MODULE이 ENABLE 상태로 마스터 보드에 연결되어 있는지 검사 함수
					if (nRet != BD_GOOD)
					{
						continue ;
					}
				}
			}
		}
	}

	return 0;
}
// ******************************************************************************

// ******************************************************************************
// PORT와 연결된 모든 SLAVE I/O 모듈 자동 ENABLE 함수                            
// ******************************************************************************
int CFastechPublic_IO::Set_IO_PortAutoEnable(int n_MasterID, int n_PortNo) 
{
	CString sMsg;
	int     nRet=0;

	nRet = HSSI_PortAutoEnable(n_MasterID, n_PortNo);  // 해당 PORT에 연결된 모든 SLAVE I/O 모듈 자동 ENABLE 함수
	if (nRet == STATUS_SUCCESS)
	{
		nRet = BD_GOOD;
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
		nRet = BD_ERROR;
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈 동작 ENABLE/DISABLE 설정 함수                                  
// ******************************************************************************
int CFastechPublic_IO::Set_IO_SlaveEnable(int n_MasterID, int n_PortNo, int n_SlaveNo, BOOL b_Enable) 
{
	CString sMsg;
	int     nRet=0;

	nRet = HSSI_EnableSlaveModule(n_MasterID, n_PortNo, n_SlaveNo, b_Enable);  // 해당 SLAVE I/O 모듈 동작 ENABLE/DISABLE 설정 함수
	if (nRet == STATUS_SUCCESS)
	{
		nRet = BD_GOOD;
	}
	else
	{
		nRet = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************


// ******************************************************************************

// ******************************************************************************
// 특정 위치 BIT값 검사 함수                                                     
// ******************************************************************************
BOOL CFastechPublic_IO::Check_Bit(long n_Value, int n_BitPos) 
{
	unsigned long nMask = 0x0001;  // 마스크 BIT 설정 
	nMask <<= n_BitPos;  // 변경할 BIT 위치로 이동 [SHIFT] 

	return (n_Value & nMask);  // 해당 BIT 변경 후 리턴 
}
// ******************************************************************************

// ******************************************************************************
// 특정 위치 BIT 변경 함수                                                       
// ******************************************************************************
void CFastechPublic_IO::Set_Bit(long &n_Value, int n_Bit, BOOL b_On) 
{
	unsigned long nMask = 0x0001;  // 마스크 BIT 설정 
	nMask <<= n_Bit;  // 변경할 BIT 위치로 이동 [SHIFT] 

	if ( b_On )
	{
		n_Value |= nMask;
	}
	else
	{
		n_Value &= ~nMask;
	}
}
// ******************************************************************************

// ******************************************************************************
// HSSI 보드 데이터 확인 및 검사 함수                                            
// -> 입력 파라메터는 일덩한 포맷으로 입력되어야 한다                            
//  : I/O MAP 정의 참조한다                                                      
//  : I/O MAP 구성은 4자리로 구성된다                                            
// ******************************************************************************
int CFastechPublic_IO::Search_IO_BoardInformation(int n_Type, int n_Data) 
{
	int nFlag     = BD_ERROR;
	int nBardData = 0;

	// **************************************************************************
	// I/O PORT에 대한 최대 입출력은 7127로 제한한다                             
	// -> 최대 사용 : 마스터 보드 2개로 제한 [I/O PORT는 2048]                   
	// **************************************************************************
	if (n_Data > HSSI_MAX_IO) //HSSI_MAX_IO = 7715
		return BD_ERROR;
	// **************************************************************************

	switch(n_Type)
	{
	case 0 :  // 마스터 보드 
		// **********************************************************************
		// 0[0, 1, 2, 3]    1[4, 5, 6, 7]    2[8, 9, 10, 11]    3[12, 13, 14, 15]
		// -> 마스터 보드 1장에 최대 4 PORT 연결된다                             
		// **********************************************************************
		nBardData = n_Data / 4000;
		// **********************************************************************
		break;

	case 1 :  // PORT 
		// **********************************************************************
		// I/O MAP 번호를 1000으로 나누면 몫이 PORT 번호가 되도록 정의되어 있다  
		// -> PORT 설정 범위는 최대 [0 - 15] 이다                                
		// -> 마스터 보드는 최대 2장으로 제한한다                                
		// **********************************************************************
		nBardData = n_Data / 1000;

		if (nBardData>3)
			nBardData -= 4;
		// **********************************************************************
		break;

	case 2 :  // SLAVE 
		// **********************************************************************
		// 한 PORT에 연결된 SLAVE 번호를 설정한다                                
		// -> PORT 당 최대 [0 - 7] 연결된다                                      
		// **********************************************************************
		nBardData = n_Data     % 1000;
		nBardData = nBardData / 100;
		// **********************************************************************
		break;

	case 3 :  // I/O BIT 
		// **********************************************************************
		// 해당 I/O BIT 위치 설정한다                                            
		// -> I/O BIT는 최대 [0 - 15] 설정할 수 있다                             
		//  : IN/OUT 상태는 임의로 조정 가능한다                                 
		// **********************************************************************
		nBardData = n_Data     % 1000;
		nBardData = nBardData % 100;
		// **********************************************************************
		break;

	default :
		return BD_ERROR;
		break;
	}

	return nBardData;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 입력을 LATCH 모드로 설정 함수 [WORD 단위]                    
// ******************************************************************************
int CFastechPublic_IO::Set_IO_LatchWord(int n_MasterID, int n_PortNo, int n_SlaveNo, WORD w_Data) 
{
	CString sMsg;
	int     nRet=0;

	nRet = HSSI_SetLatchWord(n_MasterID, n_PortNo, n_SlaveNo, w_Data);  // SLAVE I/O 모듈의 입력을 LATCH 모드로 설정 함수 [WORD 단위]
	if (nRet == STATUS_SUCCESS)
	{
		nRet = BD_GOOD;
	}
	else
	{
		nRet = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 입력을 LATCH 모드로 설정 함수 [BYTE 단위]                    
// ******************************************************************************
int CFastechPublic_IO::Set_IO_LatchByte(int n_MasterID, int n_PortNo, int n_SlaveNo, int n_Type, BYTE bt_Data) 
{
	CString sMsg;
	int     nRet=0;

	nRet = HSSI_SetLatchByte(n_MasterID, n_PortNo, n_SlaveNo, n_Type, bt_Data);  // SLAVE I/O 모듈의 입력을 LATCH 모드로 설정 함수 [BYTE 단위]
	if (nRet == STATUS_SUCCESS)
	{
		nRet = BD_GOOD;
	}
	else
	{
		nRet = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 입력을 LATCH 모드로 설정 함수 [BIT 단위]                     
// ******************************************************************************
int CFastechPublic_IO::Set_IO_LatchBit(int n_IONo, BOOL b_Data) 
{
	CString sMsg;
	int     nRet=0;	
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0, nBitNo=0;

	nMasterID = Search_IO_BoardInformation(0, n_IONo);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo);
	nBitNo    = Search_IO_BoardInformation(3, n_IONo);

	nRet = HSSI_SetLatchBit(nMasterID, nPortNo, nSlaveNo, nBitNo, b_Data);  // SLAVE I/O 모듈의 입력을 LATCH 모드로 설정 함수 [BIT 단위]
	if (nRet == STATUS_SUCCESS)
	{
		nRet = BD_GOOD;
	}
	else
	{
		nRet = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 LATCH 상태 리턴 함수 [WORD 단위]                             
// ******************************************************************************
WORD CFastechPublic_IO::Get_IO_LatchWord(int n_MasterID, int n_PortNo, int n_SlaveNo) 
{
	CString sMsg;
	int     nRet=0;
	
	WORD    wData=0;

	nRet = HSSI_ReadLatchWord(n_MasterID, n_PortNo, n_SlaveNo, &wData);  // SLAVE I/O 모듈의 LATCH 상태 리턴 함수 [WORD 단위]
	if (nRet == STATUS_SUCCESS)
	{
		//wData는 정상값이 들어갔다 //wData = BD_GOOD;
	}
	else
	{
		wData = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return wData;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 LATCH 상태 리턴 함수 [BYTE 단위]                             
// ******************************************************************************
BYTE CFastechPublic_IO::Get_IO_LatchByte(int n_MasterID, INT n_PortNo, int n_SlaveNo, int n_Type) 
{
	CString sMsg;
	int     nRet=0;	
	BYTE    bData=0;

	nRet = HSSI_ReadLatchByte(n_MasterID, n_PortNo, n_SlaveNo, n_Type, &bData);  // SLAVE I/O 모듈의 LATCH 상태 리턴 함수 [BYTE 단위]
	if (nRet == STATUS_SUCCESS)
	{	 
	}
	else
	{
		bData = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return bData;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 LATCH 상태 리턴 함수 [BIT 단위]                              
// ******************************************************************************
BOOL CFastechPublic_IO::Get_IO_LatchBit(int n_IONo) 
{
	CString sMsg;
	int     nRet=0;
	BOOL    bData=0;
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0, nBitNo=0;

	nMasterID = Search_IO_BoardInformation(0, n_IONo);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo);
	nBitNo    = Search_IO_BoardInformation(3, n_IONo);

	nRet = HSSI_ReadLatchBit(nMasterID, nPortNo, nSlaveNo, nBitNo, &bData);  // SLAVE I/O 모듈의 LATCH 상태 리턴 함수 [BIT 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		bData = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return bData;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 LATCH 동작 정지 함수 [WORD 단위]                             
// ******************************************************************************
int CFastechPublic_IO::Reset_IO_LatchWord(int n_MasterID, int n_PortNo, int n_SlaveNo, WORD w_Data) 
{
	CString sMsg;
	int     nRet=0;

	nRet = HSSI_ResetLatchWord(n_MasterID, n_PortNo, n_SlaveNo, w_Data);  // SLAVE I/O 모듈의 LATCH 동작 정지 함수 [WORD 단위]
	if (nRet == STATUS_SUCCESS)
	{
		nRet = BD_GOOD;
	}
	else
	{
		nRet = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 LATCH 동작 정지 함수 [BYTE 단위]                             
// ******************************************************************************
int CFastechPublic_IO::Reset_IO_LatchByte(int n_MasterID, int n_PortNo, int n_SlaveNo, int n_Type, BYTE bt_Data) 
{
	CString sMsg;
	int     nRet=0;

	nRet = HSSI_ResetLatchByte(n_MasterID, n_PortNo, n_SlaveNo, n_Type, bt_Data);  // SLAVE I/O 모듈의 LATCH 동작 정지 함수 [BYTE 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈의 LATCH 동작 정지 함수 [BIT 단위]                              
// ******************************************************************************
int CFastechPublic_IO::Reset_IO_LatchBit(int n_IONo, BOOL b_Data) 
{
	CString sMsg;
	int     nRet=0;
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0, nBitNo=0;

	nMasterID = Search_IO_BoardInformation(0, n_IONo);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo);
	nBitNo    = Search_IO_BoardInformation(3, n_IONo);

	nRet = HSSI_SetLatchBit(nMasterID, nPortNo, nSlaveNo, nBitNo, b_Data);  // SLAVE I/O 모듈의 LATCH 동작 정지 함수 [BIT 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수 
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// 마스터 보드 장착 유무 검사 함수                                               
// ******************************************************************************
int CFastechPublic_IO::Check_IO_MasterStatus(INT n_MasterID) 
{
	CString sMsg;
	int     nRet=0;

	nRet = HSSI_IsExistMasterBoard(n_MasterID);  // 마스터 보드 장착 유무 검사 함수
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// PORT 존재 유무 및 정상 동작 검사 함수                                         
// ******************************************************************************
int CFastechPublic_IO::Check_IO_PortStatus(int n_MasterID, int n_PortNo) 
{
	CString sMsg;
	int     nRet=0;

	nRet = HSSI_IsExistPort(n_MasterID, n_PortNo);  // PORT 존재 유무 및 정상 동작 검사 함수
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************


//////////////////////////////////////////////////////////////////////////////////////////////////////////
//I/O를 직접 제어한다  james Lee 2008.9.5
//////////////////////////////////////////////////////////////////////////////////////////////////////////
// ******************************************************************************
// SLAVE I/O 모듈 출력 신호 발생 함수 [WORD 단위]                                
// ******************************************************************************
int CFastechPublic_IO::Set_Out_Word(int n_IONo, WORD w_Data) 
{
	CString sMsg;
	int     nRet=0;	
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0;

	nMasterID = Search_IO_BoardInformation(0, n_IONo * 100);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo * 100);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo * 100);

	nRet = HSSI_WriteOutputWord(nMasterID, nPortNo, nSlaveNo, w_Data);  // SLAVE I/O 모듈 출력 신호 발생 함수 [WORD 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈 출력 신호 발생 함수 [BYTE 단위]                                
// ******************************************************************************
int CFastechPublic_IO::Set_Out_Byte(int n_IONo, int n_Type, BYTE bt_Data) 
{
	CString sMsg;
	int     nRet=0;	
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0;

	nMasterID = Search_IO_BoardInformation(0, n_IONo * 100);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo * 100);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo * 100);

	nRet = HSSI_WriteOutputByte(nMasterID, nPortNo, nSlaveNo, n_Type, bt_Data);  // SLAVE I/O 모듈 출력 신호 발생 함수 [BYTE 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈 출력 신호 발생 함수 [BIT 단위]                                 
// ******************************************************************************
int CFastechPublic_IO::Set_Out_Bit(int n_IONo, BOOL b_OnOff) 
{
	CString sMsg;
	int     nRet=0;
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0, nBitNo=0;

	nMasterID = Search_IO_BoardInformation(0, n_IONo);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo);
	nBitNo    = Search_IO_BoardInformation(3, n_IONo);

	nRet = HSSI_WriteOutputBit(nMasterID, nPortNo, nSlaveNo, nBitNo, b_OnOff);  // SLAVE I/O 모듈 출력 신호 발생 함수 [BIT 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return nRet;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈 입력 신호 READ 함수 [WORD 단위]                                
// ******************************************************************************
WORD CFastechPublic_IO::Get_In_Word(int n_IONo) 
{
	CString sMsg;
	int     nRet=0;
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0;
	WORD    wData=0;

	nMasterID = Search_IO_BoardInformation(0, n_IONo * 100);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo * 100);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo * 100);

	nRet = HSSI_ReadInputWord(nMasterID, nPortNo, nSlaveNo, &wData);  // SLAVE I/O 모듈 입력 신호 READ 함수 [WORD 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		wData = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return wData;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈 출력 신호 READ 함수 [WORD 단위]                                
// ******************************************************************************
WORD CFastechPublic_IO::Get_Out_Word(int n_IONo)
{
	CString sMsg;
	int     nRet=0;
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0;
	WORD    wData=0;
	
	nMasterID = Search_IO_BoardInformation(0, n_IONo * 100);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo * 100);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo * 100);
	
	nRet = HSSI_ReadOutputWord(nMasterID, nPortNo, nSlaveNo, &wData);  // SLAVE I/O 모듈 입력 신호 READ 함수 [WORD 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		wData = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return wData;	
}

// ******************************************************************************
// SLAVE I/O 모듈 입력 신호 READ 함수 [BYTE 단위]                                
// ******************************************************************************
BYTE CFastechPublic_IO::Get_In_Byte(int n_IONo, int n_Type) 
{
	CString sMsg;
	int     nRet=0;
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0;
	BYTE    btData=0;

	nMasterID = Search_IO_BoardInformation(0, n_IONo * 100);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo * 100);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo * 100);

	nRet = HSSI_ReadInputByte(nMasterID, nPortNo, nSlaveNo, n_Type, &btData);  // SLAVE I/O 모듈 입력 신호 READ 함수 [BYTE 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		btData = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return btData;
}
// ******************************************************************************

// ******************************************************************************
// SLAVE I/O 모듈 출력 신호 READ 함수 [BYTE 단위]                                
// ******************************************************************************
BYTE CFastechPublic_IO::Get_Out_Byte(int n_IONo, int n_Type)
{
	CString sMsg;
	int     nRet=0;
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0;
	BYTE    btData=0;
	
	nMasterID = Search_IO_BoardInformation(0, n_IONo * 100);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo * 100);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo * 100);
	
	nRet = HSSI_ReadOutputByte(nMasterID, nPortNo, nSlaveNo, n_Type, &btData);  // SLAVE I/O 모듈 입력 신호 READ 함수 [BYTE 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		btData = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return btData;
}

// ******************************************************************************
// SLAVE I/O 모듈 입력 신호 READ 함수 [BIT 단위]                                 
// ******************************************************************************
BOOL CFastechPublic_IO::Get_In_Bit(int n_IONo) 
{
	CString sMsg;
	int     nRet=0;
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0, nBitNo = 0;
	BOOL    bData;

	nMasterID = Search_IO_BoardInformation(0, n_IONo);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo);
	nBitNo    = Search_IO_BoardInformation(3, n_IONo);

	nRet = HSSI_ReadInputBit(nMasterID, nPortNo, nSlaveNo, nBitNo, &bData);  // SLAVE I/O 모듈 입력 신호 READ 함수 [BIT 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		bData = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return bData;
}




// ******************************************************************************
// SLAVE I/O 모듈 출력 신호 READ 함수 [BIT 단위]                                 
// ******************************************************************************
BOOL CFastechPublic_IO::Get_Out_Bit(int n_IONo)
{
	CString sMsg;
	int     nRet=0;	
	INT     nMasterID=0, nPortNo=0, nSlaveNo=0,nBitNo=0;
	BOOL    bData;
	
	nMasterID = Search_IO_BoardInformation(0, n_IONo);  // HSSI 보드 데이터 확인 및 검사 함수
	nPortNo   = Search_IO_BoardInformation(1, n_IONo);
	nSlaveNo  = Search_IO_BoardInformation(2, n_IONo);
	nBitNo    = Search_IO_BoardInformation(3, n_IONo);
	
	nRet = HSSI_ReadOutputBit(nMasterID, nPortNo, nSlaveNo, nBitNo, &bData);  // SLAVE I/O 모듈 입력 신호 READ 함수 [BIT 단위]
	if (nRet == STATUS_SUCCESS)
	{
	}
	else
	{
		bData = BD_ERROR;
		sMsg = ErrorOccurInfo(nRet);  // HSSI DLL 함수 호출 관련 에러 파싱 함수
		if (mn_errormsg_debug_mode)	AfxMessageBox(sMsg);
	}
	
	return bData;
}
// ******************************************************************************

// ******************************************************************************
// 다중 I/O 동시 출력 함수 [최대 8 PORT 동시 제어]                               
// -> int nSite     : 출력할 I/O PORT 부위                                       
//  : 차후에 I/O PORT 출력 제약 조건 검사 시 필요하다                            
// -> int nModuleNo : 출력할 I/O PORT 존재 모듈 번호                             
// -> int nOffset   : I/O BIT TYPE                                               
//  : TYPE_LBYTE [0x2] : 16 BIT 중 상위 8BIT 읽어 리턴한다                       
//  : TYPE_HBYTE [0x3] : 16 BIT 중 하위 8BIT 읽어 리턴한다                       
// -> int *npBit    : 상태 변경할 I/O PORT 번호                                  
// -> int *npOnOff  : 출력 I/O PORT 상태 [0:OFF    1:ON]                         
// -> int nBitCount : 상태 변경할 I/O PORT 갯수                                  
//  : [npBit/npOnOff] 배열 크리보다는 작던지 같은 값일 것이다                    
// ******************************************************************************
int CFastechPublic_IO::Set_IO_Multi_Action(int nSite, int nModuleNo, int nOffset,
										int *npBit, int *npOnOff, int nBitCount, int n_onoff) 
{
	int  i;
	int  nType;     // 읽을 I/O BIT 타입 저장 변수 
	int  iPortMap;  // I/O PORT MAP 데이터 저장 변수 
	int n_val_1 = 0, n_val_2 = 0;
	long lOutData;  // 출력 포트 데이터 저장 변수 

	if (nBitCount > 8)  // 최대 BIT 제어 
	{
		return BD_ERROR;
	}

	// **************************************************************************
	// OUT PORT 출력 제약 조건 추가한다                                          
	// **************************************************************************
	
	// **************************************************************************

	if (nOffset == 0)
	{
		nType = TYPE_LBYTE;
	}
	else
	{
		nType = TYPE_HBYTE;
	}

	n_val_1 = Get_In_Byte(nModuleNo, nType);       // SLAVE I/O 모듈 입력 신호 READ 함수 [BYTE 단위]

	if(n_onoff == IO_ON)						// On 시키는 동작일때...
	{
		for(i = 0; i < nBitCount; i++)
		{
			if(npOnOff[i] == YES)
			{
				n_val_2 += (int)pow(2, i);
			}
		}
		lOutData = n_val_1 | n_val_2;
	}
	else										// Off 시키는 동작일때...
	{
		for (i = 0; i < nBitCount; i++)
		{
			if(npOnOff[i] == NO)
			{
				n_val_2 += (int)pow(2, i);
			}
		}

		lOutData = n_val_1 & n_val_2;
	}

	Set_Out_Byte(nModuleNo, nType, (int)lOutData);  // SLAVE I/O 모듈 출력 신호 발생 함수 [BYTE 단위]

	// **************************************************************************
	// -> 멀티 PORT 중 첫번째 PORT MAP을 배열 값으로 사용한다                    
	//  : 동일한 PORT를 동시에 2곳에서 동작시키는 경우는 없기 때문에 타이머 정상 
	//    동작할 것이다                                                          
	//  : 그러므로 배열 크기는 I/O PORT 중 가장 번호가 높은 MAP 번호보다         
	//    크거나 같아야 한다                                                     
	// **************************************************************************
	iPortMap = (nModuleNo * 100) + npBit[0];  // 첫번째 I/O PORT의 MAP 데이터 설정 

	lCylinderTime[iPortMap][0] = GetCurrentTime();
	bCylinderFlag[iPortMap] = true;
	// **************************************************************************

	return BD_GOOD;
}
// ******************************************************************************

// ******************************************************************************
// 다중 I/O 상태 검사 함수 [최대 8 PORT 동시 제어]                               
// -> int nSite      : 출력할 I/O PORT 부위                                      
//  : 차후에 I/O PORT 출력 제약 조건 검사 시 필요한다                            
// -> int nModuleNo  : 출력할 I/O PORT 존재 모듈 번호                            
// -> int nOffset    : I/O BIT TYPE                                              
//  : TYPE_LBYTE [0x2] : 16 BIT 중 상위 8BIT 읽어 리턴한다                       
//  : TYPE_HBYTE [0x3] : 16 BIT 중 하위 8BIT 읽어 리턴한다                       
// -> int *npBit     : 상태 변경할 I/O PORT 번호                                 
// -> int *npOnOff   : 출력 I/O PORT 상태 [0:OFF    1:ON]                        
// -> int nBitCount  : 상태 변경할 I/O PORT 갯수                                 
//  : [npBit/npOnOff] 배열 크리보다는 작던지 같은 값일 것이다                    
// -> int nWaitTime  : OUT PORT 동작 후 적용될 대기 시간                         
// -> int nLimitTime : OUT PORT 동작 완료 검사 리미트 시간                       
// ******************************************************************************
int CFastechPublic_IO::Get_IO_Multi_ActionCheck(int nSite, int nModuleNo, int nOffset,
											 int *npBit, int *npOnOff, int nBitCount, int nWaitTime, int nLimitTime) 
{
	int  i;
	int  nType;     // 읽을 I/O BIT 타입 저장 변수 
	int  iCount=0;  // 검사한 PORT 갯수 
	int  iState;    // PORT 상태 저장 변수 
	int  iPortMap;  // I/O PORT MAP 데이터 저장 변수 
	int  iFuncRet = BD_PROCEED;
	long lInData;   // 포트 데이터 저장 변수 

	if (nBitCount>8)  // 최대 BIT 제어 
	{
		return BD_ERROR;
	}

	// **************************************************************************
	// OUT PORT 출력 제약 조건 추가한다                                          
	// **************************************************************************
	
	// **************************************************************************

	if (nOffset == 0)
	{
		nType = TYPE_LBYTE;
	}
	else
	{
		nType = TYPE_HBYTE;
	}

	lInData = Get_In_Byte(nModuleNo, nType);  // SLAVE I/O 모듈 입력 신호 READ 함수 [BYTE 단위]

	for(i=0; i<nBitCount; i++)
	{
		iState = (int)Check_Bit(lInData, npBit[i]);
		if (iState == npOnOff[i])
		{
			iCount++ ;
		}
	}

	// **************************************************************************
	// -> 멀티 PORT 중 첫번째 PORT MAP을 배열 값으로 사용한다                    
	//  : 동일한 PORT를 동시에 2곳에서 동작시키는 경우는 없기 때문에 타이머 정상 
	//    동작할 것이다                                                          
	//  : 그러므로 배열 크기는 I/O PORT 중 가장 번호가 높은 MAP 번호보다         
	//    크거나 같아야 한다                                                     
	// **************************************************************************
	iPortMap = (nModuleNo * 100) + npBit[0];  // 첫번째 I/O PORT의 MAP 데이터 설정 

	if ((bCylinderFlag[iPortMap] == true) &&
		(iCount == nBitCount))
	{
		bCylinderFlag[iPortMap] = false;
		lCylinderTime[iPortMap][0] = GetCurrentTime();
	}
	else if ((bCylinderFlag[iPortMap] == false) &&
		(iCount == nBitCount))
	{
		lCylinderTime[iPortMap][1] = GetCurrentTime();
		lCylinderTime[iPortMap][2] = lCylinderTime[iPortMap][1] - lCylinderTime[iPortMap][0];
		if (lCylinderTime[iPortMap][2] > nWaitTime)
		{
			iFuncRet = BD_GOOD;
		}
		else if (lCylinderTime[iPortMap][2] < 0)
		{
			lCylinderTime[iPortMap][0] = GetCurrentTime();
		}
	}
	else
	{
		lCylinderTime[iPortMap][1] = GetCurrentTime();
		lCylinderTime[iPortMap][2] = lCylinderTime[iPortMap][1] - lCylinderTime[iPortMap][0];
		if (lCylinderTime[iPortMap][2] > nLimitTime)
		{
			iFuncRet = BD_ERROR;
		}
		else if (lCylinderTime[iPortMap][2] < 0)
		{
			lCylinderTime[iPortMap][0] = GetCurrentTime();
		}
	}
	// **************************************************************************

	return iFuncRet;
}
// ******************************************************************************


// ******************************************************************************
// HSSI DLL 함수 호출 관련 에러 파싱 함수                                        
// -> nErrorNum                : 발생한 에러 번호                                
// -> STATUS_SUCCESS = 0x0     : 보드 존재                                       
// -> STATUS_ERROR_NO_DEVICE   : 동작 중인 보드 미존재                           
// -> STATUS_ERROR_READ        : READ 동작 실패                                  
// -> STATUS_ERROR_WRITE       : WRITE 동작 실패                                 
// -> STATUS_ERROR_INITIALIZE  : 초기화 실패 [RESET 포함]                        
// -> STATUS_ERROR_COMMAND     : CMD 사용에 문제 발생                            
// -> STATUS_ERROR_FILE        : FILE에 문제 발생                                
// -> STATUS_ERROR_PORT        : PORT 미존재                                     
// -> STATUS_ERROR_SLAVE       : SLAVE가 ON 아님                                 
// -> STATUS_NOTUSE_COMMAND    : 지원하지 않는 명령어                            
// -> STATUS_INVALID_BOARDID   : 해당 보드 미존재                                
// -> STATUS_INVALID_PORTNO    : 해당 PORT 미존재                                
// -> STATUS_INVALID_SLAVEID   : 해당 SLAVE 미존재                               
// -> STATUS_INVALID_PARAMETER : 파라메터 입력 실패                              
// -> STATUS_INVALID_DLL       : 잘못된 DLL 사용                                 
// ******************************************************************************
char* CFastechPublic_IO::ErrorOccurInfo(int nErrorNum) 
{

 	CString sErrorMsg;  // 에러 메시지 임시 저장 변수 
 
 	static char cMsg[60]={0,};

	if (nErrorNum == STATUS_ERROR_NO_DEVICE)
	{
		sErrorMsg = _T("동작 중인 보드 미존재");
	}
	else if (nErrorNum == STATUS_ERROR_READ)
	{
		sErrorMsg = _T("READ 동작 실패");
	}
	else if (nErrorNum == STATUS_ERROR_WRITE)
	{
		sErrorMsg = _T("WRITE 동작 실패");
	}
	else if (nErrorNum == STATUS_ERROR_INITIALIZE)
	{
		sErrorMsg = _T("초기화 실패 [RESET 포함]");
	}
	else if (nErrorNum == STATUS_ERROR_COMMAND)
	{
		sErrorMsg = _T("CMD 사용에 문제 발생");
	}
	else if (nErrorNum == STATUS_ERROR_FILE)
	{
		sErrorMsg = _T("FILE에 문제 발생");
	}
	else if (nErrorNum == STATUS_ERROR_PORT)
	{
		sErrorMsg = _T("PORT 미존재");
	}
	else if (nErrorNum == STATUS_ERROR_SLAVE)
	{
		sErrorMsg = _T("SLAVE가 ON 아님");
	}
	else if (nErrorNum == STATUS_NOTUSE_COMMAND)
	{
		sErrorMsg = _T("지원하지 않는 명령어");
	}
	else if (nErrorNum == STATUS_INVALID_BOARDID)
	{
		sErrorMsg = _T("해당 보드 미존재");
	}
	else if (nErrorNum == STATUS_INVALID_PORTNO)
	{
		sErrorMsg = _T("해당 PORT 미존재");
	}
	else if (nErrorNum == STATUS_INVALID_SLAVEID)
	{
		sErrorMsg = _T("해당 SLAVE 미존재");
	}
	else if (nErrorNum == STATUS_INVALID_PARAMETER)
	{
		sErrorMsg = _T("파라메터 입력 실패");
	}
	else if (nErrorNum == STATUS_INVALID_DLL)
	{
		sErrorMsg = _T("잘못된 DLL 사용");
	}
	else
	{
		sErrorMsg.Format(_T("정의되지 않은 HSSI 에러 코드 = %d"), nErrorNum);
	}

	strncpy(cMsg, sErrorMsg, sizeof(cMsg)-1);
	cMsg[sizeof(cMsg)-1] = '\0'; //2011.0518

	return cMsg;
}
// ******************************************************************************

/*
int CFastechPublic_IO::Check_IO_Port(int n_io, int n_time, int n_flag)
{
	int Ret = CTLBD_READY;	// 함수 리턴 플래그 설정 
	
	if (n_time == 0)	// 대기 시간없이 바로 리턴값을 받아야 한다.
	{
		if (Get_IO_InportBit(n_io) == TRUE)
		{
			Ret = CTLBD_YES;
		}
		else	Ret = CTLBD_NO;
	}
	else				// 설정 시간동안 확인하고, 리턴값을 받는다.
	{
		if (IOFlag[n_io] != true)
		{
			IOTime[n_io][0]	= GetCurrentTime();
			IOFlag[n_io] = true;
		}
		else if (Get_IO_InportBit(n_io) == TRUE && IOFlag[n_io] == true)
		{
			IOTime[n_io][1] = GetCurrentTime();
			IOTime[n_io][2] = IOTime[n_io][1] - IOTime[n_io][0];
			
			if (IOTime[n_io][2] >= n_time)
			{
				IOFlag[n_io] = false;
				Ret = CTLBD_YES;
			}
		}
		else if (Get_IO_InportBit(n_io) == FALSE && IOFlag[n_io] == true)
		{
			IOTime[n_io][1] = GetCurrentTime();
			IOTime[n_io][2] = IOTime[n_io][1] - IOTime[n_io][0];
			
			if (IOTime[n_io][2] >= n_time)
			{
				IOFlag[n_io] = false;
				Ret = CTLBD_NO;
			}
		}
	}
	
	return Ret;
}

int CFastechPublic_IO::Check_IO_Port_Yield(int n_io, int n_time, int n_yield)
{
	int Ret = CTLBD_READY;	// 함수 리턴 플래그 설정 
	
	if (IOYFlag[n_io] != true)
	{
		IOYTime[n_io][0] = GetCurrentTime();
		IOYFlag[n_io] = true;
		// Yield Check 초기화. 2K6/05/18/ViboX
		IOYCount[n_io][0] = 0;					// false
		IOYCount[n_io][1] = 0;					// true
		IOYCount[n_io][2] = 0;					// total
	}
	else if (Get_IO_InportBit(n_io) == TRUE && IOYFlag[n_io] == true)
	{
		IOYCount[n_io][1]++;
	}
	else if (Get_IO_InportBit(n_io) == FALSE && IOYFlag[n_io] == true)
	{
		IOYCount[n_io][0]++;
	}
	
	if (IOYFlag[n_io] == true)
	{
		IOYTime[n_io][1] = GetCurrentTime();
		IOYTime[n_io][2] = IOYTime[n_io][1] - IOYTime[n_io][0];
		
		if (IOYTime[n_io][2] >= n_time)
		{
			
			IOYCount[n_io][2] = IOYCount[n_io][1] + IOYCount[n_io][0];
			
			if (IOYCount[n_io][2] <= 0)
			{
				return CTLBD_NO;
			}
			IOYYield[n_io] = (float)IOYCount[n_io][1] / IOYCount[n_io][2];
			
			if (IOYYield[n_io] >= n_yield)
			{
				Ret = CTLBD_YES;
			}
			else
			{
				Ret = CTLBD_NO;
			}
			IOYFlag[n_io] = false;
		}
	}
	return Ret;
}

*/

// ******************************************************************************
//  실린더 동작시키는  함수 (단동)                                               
// ******************************************************************************
void CFastechPublic_IO::OnCylinderAction(int n_cyl, int n_act)
{
	//Set_Out_Bit(n_cyl, n_act);
	set_out_bit(n_cyl, n_act);
	
	CYLTime[n_cyl][0] = GetCurrentTime();
	
	CYLFlag[n_cyl] = false;
}

// ******************************************************************************
//  실린더 동작시키는  함수 (복복동)                                             
// ******************************************************************************
void CFastechPublic_IO::OnCylinderAction(int n_cyl, int n_cyl2, int n_act)
{
	//Set_Out_Bit(n_cyl, n_act);
	//Set_Out_Bit(n_cyl2, !n_act);
	set_out_bit(n_cyl, n_act);
	set_out_bit(n_cyl2, !n_act);
	
	CYLTime[n_cyl][0] = GetCurrentTime();
	
	CYLFlag[n_cyl] = false;
}

// ******************************************************************************
//  실린더 동작 시킨후 확인하는 함수 (센서 하나용)                               
// ******************************************************************************
int CFastechPublic_IO::OnCylinderActionCheck(int n_cyl, int n_sen, int n_act, int n_wait, int n_limit)
{
	int Ret = RET_PROCEED;  // 함수 리턴 플래그 설정 
	
	if (get_in_bit(n_sen, n_act) == n_act && CYLFlag[n_cyl] == false)
	{
		CYLTime[n_cyl][0]	= GetCurrentTime();
		CYLFlag[n_cyl] = true;
	}
	else if (get_in_bit(n_sen, n_act) == n_act && CYLFlag[n_cyl] == true)
	{
		CYLTime[n_cyl][1] = GetCurrentTime();
		CYLTime[n_cyl][2] = CYLTime[n_cyl][1] - CYLTime[n_cyl][0];
		
		if(CYLTime[n_cyl][2] < 0)
		{
			CYLTime[n_cyl][0]	= GetCurrentTime();
			return Ret;
		}

		if (CYLTime[n_cyl][2] >= n_wait)
		{
			Ret = RET_GOOD;
		}
	}
	else
	{
		CYLTime[n_cyl][1] = GetCurrentTime();
		CYLTime[n_cyl][2] = CYLTime[n_cyl][1] - CYLTime[n_cyl][0];
		
		if(CYLTime[n_cyl][2] < 0)
		{
			CYLTime[n_cyl][0]	= GetCurrentTime();
			return Ret;
		}

		if (CYLTime[n_cyl][2] >= n_limit)
		{
			Ret = RET_ERROR;
		}
	}
	return Ret;
}

// ******************************************************************************
//  실린더 동작 시킨후 확인하는 함수 (센서 두개용)                               
// ******************************************************************************
int CFastechPublic_IO::OnCylinderActionCheck(int n_cyl, int n_sen1, int n_sen2, int n_act, int n_wait, int n_limit)
{
	int Ret = RET_PROCEED;  // 함수 리턴 플래그 설정 
	
	if (get_in_bit(n_sen1, n_act) == n_act && 
		get_in_bit(n_sen2, !n_act) == !n_act && 
		CYLFlag[n_cyl] == false)
	{
		CYLTime[n_cyl][0]	= GetCurrentTime();
		CYLFlag[n_cyl] = true;
	}
	else if (get_in_bit(n_sen1, n_act) == n_act && 
		get_in_bit(n_sen2, !n_act) == !n_act && 
		CYLFlag[n_cyl] == true)
	{
		CYLTime[n_cyl][1] = GetCurrentTime();
		CYLTime[n_cyl][2] = CYLTime[n_cyl][1] - CYLTime[n_cyl][0];
		
		if(CYLTime[n_cyl][2] < 0)
		{
			CYLTime[n_cyl][0]	= GetCurrentTime();
			return Ret;
		}

		if (CYLTime[n_cyl][2] >= n_wait)
		{
			Ret = RET_GOOD;
		}
	}
	else
	{
		CYLTime[n_cyl][1] = GetCurrentTime();
		CYLTime[n_cyl][2] = CYLTime[n_cyl][1] - CYLTime[n_cyl][0];
		
		if(CYLTime[n_cyl][2] < 0)
		{
			CYLTime[n_cyl][0]	= GetCurrentTime();
			return Ret;
		}

		if (CYLTime[n_cyl][2] >= n_limit)
		{
			Ret = RET_ERROR;
		}
	}
	return Ret;
}


int CFastechPublic_IO::Reset_Safety_Area_OnOff(int nOnOff)
{
	int nRetFunc = RET_PROCEED;
	switch(SafetyAreaStep)
	{
	case 0:
//		FAS_IO.set_out_bit(st_io.o_mute_on_switch_lamp, nOnOff);
//		FAS_IO.set_out_bit(st_io.o_mute_off_switch_lamp, !nOnOff);
		ml_delaysafety[0] = GetCurrentTime();
		SafetyAreaStep = 100;		
		break;

	case 100:
		ml_delaysafety[1] = GetCurrentTime();
		ml_delaysafety[2] = ml_delaysafety[1] - ml_delaysafety[0];
		if(ml_delaysafety[2] > 500)
		{
//			if(FAS_IO.get_in_bit(st_io.i_mute_on_switch_chk, nOnOff) == nOnOff &&
//				FAS_IO.get_in_bit(st_io.i_mute_off_switch_chk, !nOnOff) == nOnOff)
			if(1)
			{
				SafetyAreaStep = 200;
			}
			else
			{
				n_retry++;
				if(n_retry > 2)
				{
					//900400 0 90 "Mute Switch 동작 에러"
					alarm.mstr_pcode = _T("900400");
					alarm.mn_count_mode = 0;				// 알람 카운트 플래그 설정 (0:알람 카운트 미진행    1:알람 카운트 진행)
					alarm.mn_type_mode = eWARNING;		// 알람 종류 설정 (0:경고성    1:진행성    2:장비 정지)
					SafetyAreaStep = 0;
					nRetFunc = RET_ERROR;
				}
				else
				{
					SafetyAreaStep = 0;
				}
			}
		}
		break;

	case 200:
		//FAS.Set_Out_Bit(st_io.o_safety_area_onoff, IO_OFF);
		ml_delaysafety[0] = GetCurrentTime();
		SafetyAreaStep = 300;		
		break;

	case 300:
		ml_delaysafety[1] = GetCurrentTime();
		ml_delaysafety[2] = ml_delaysafety[1] - ml_delaysafety[0];
		if(ml_delaysafety[2] > 500)
		{
			if(1)//FAS_IO.Get_Out_Bit(st_io.o_safety_area_onoff) == IO_ON)
			{
				SafetyAreaStep = 500;
			}
			else
			{
				n_retry++;
				if(n_retry > 5)
				{
					n_retry = 0;
					SafetyAreaStep = 0;
					//130201 0 13 "Unloader Elevator's Area Sensor timeout,(S1103 PS1108)"
					alarm.mstr_pcode = _T("130201");		// Alarm 화면을 띄워준다. 2K5/03/10/ViboX
					alarm.mn_count_mode = 0;				// 알람 카운트 여부 플래그 설정 (알람 카운트 작업 미진행)
					alarm.mn_type_mode = eWARNING;		// 현재 발생한 알람 상태 플래그 설정
					//st_work.n_run_status = dWARNING;	// dJAM,dWARNING 

					alarm.mn_alarm_assign_section = 68;
					nRetFunc = RET_ERROR;
				}
				else
				{
					SafetyAreaStep = 200;
				}
			}
		}
		break;

	case 500:
		nRetFunc = RET_GOOD;
		SafetyAreaStep = 0;
		break;
	
	}
	return nRetFunc;
}